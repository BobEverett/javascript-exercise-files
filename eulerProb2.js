/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.

*/


let fibSum = 0;
let fibNum = [];
let fibTemp = 0;

// collecting all the numbers divisible by 2 in an array in order to double check calculation using an array method
let fibDiv2 = [];


for (let i = 0;
  (fibTemp < 4000000); i++) {

  if ((i == 0) || (i == 1)) {
    fibTemp = 1;
    fibNum.push(fibTemp);
  }
  else {
    fibTemp = (fibNum[i - 1] + fibNum[i - 2]);
    fibNum.push(fibTemp);
  }

  if ((fibTemp % 2) == 0) {
    fibSum += (fibTemp + 1)
    fibDiv2.push(fibTemp)
  }

  console.log(`Term: ${i.toString().padEnd(10)} FibNum: ${fibTemp.toString().padEnd(15)} FibSum: ${fibSum.toString().padEnd(15)}`)
}



// test to double check the sum using another method


const fibSumCheck = fibDiv2.reduce((a, b) => a + b, 0);

if (fibSumCheck === fibSum) {
  console.log(`\nThe calculation is correct | ${fibSum} = ${fibSumCheck}\n`);
}
else {
  console.log(`\nYour calculation is not correct. | ${fibSum} != ${fibSumCheck} | Debug and try again.\n`);
}
